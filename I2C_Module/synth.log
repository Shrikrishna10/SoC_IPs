
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54 (git sha1 db72ec3bd, g++ 15.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)

-- Executing script file `i2c_gate_count.ys' --

1. Executing Liberty frontend: /home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: apb_i2c.sv
Parsing SystemVerilog input from `apb_i2c.sv' to AST representation.
Generating RTLIL representation for module `\apb_i2c'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: i2c_master_bit_ctrl.sv
Parsing SystemVerilog input from `i2c_master_bit_ctrl.sv' to AST representation.
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\i2c_master_bit_ctrl'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: i2c_master_byte_ctrl.sv
Parsing SystemVerilog input from `i2c_master_byte_ctrl.sv' to AST representation.
Generating RTLIL representation for module `\i2c_master_byte_ctrl'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: i2c_master_defines.sv
Parsing SystemVerilog input from `i2c_master_defines.sv' to AST representation.
Successfully finished Verilog frontend.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \apb_i2c
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

6.1.2. Analyzing design hierarchy..
Top module:  \apb_i2c
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$i2c_master_byte_ctrl.sv:191$109 in module i2c_master_byte_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_byte_ctrl.sv:176$104 in module i2c_master_byte_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_byte_ctrl.sv:167$102 in module i2c_master_byte_ctrl.
Marked 2 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:352$96 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:318$83 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:312$80 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:302$75 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:288$67 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:266$55 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:252$51 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:245$44 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:231$42 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:204$34 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$i2c_master_bit_ctrl.sv:194$22 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$apb_i2c.sv:188$18 in module apb_i2c.
Marked 1 switch rules as full_case in process $proc$apb_i2c.sv:169$8 in module apb_i2c.
Marked 1 switch rules as full_case in process $proc$apb_i2c.sv:0$7 in module apb_i2c.
Marked 2 switch rules as full_case in process $proc$apb_i2c.sv:70$1 in module apb_i2c.
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 24 redundant assignments.
Promoted 2 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:176$104'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:167$102'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:318$83'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:312$80'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:302$75'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:288$67'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:252$51'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:245$44'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:231$42'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:204$34'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:194$22'.
Found async reset \HRESETn in `\apb_i2c.$proc$apb_i2c.sv:188$18'.
Found async reset \HRESETn in `\apb_i2c.$proc$apb_i2c.sv:169$8'.
Found async reset \HRESETn in `\apb_i2c.$proc$apb_i2c.sv:70$1'.

6.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~36 debug messages>

6.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
     1/7: $0\cmd_ack[0:0]
     2/7: $0\ld[0:0]
     3/7: $0\shift[0:0]
     4/7: $0\core_txd[0:0]
     5/7: $0\core_cmd[3:0]
     6/7: $0\c_state[4:0]
     7/7: $0\ack_out[0:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:176$104'.
     1/1: $0\dcnt[2:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:167$102'.
     1/1: $0\sr[7:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
     1/5: $0\cmd_ack[0:0]
     2/5: $0\c_state[17:0]
     3/5: $0\sda_chk[0:0]
     4/5: $0\sda_oen[0:0]
     5/5: $0\scl_oen[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:326$93'.
     1/1: $0\dout[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:318$83'.
     1/1: $0\al[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:312$80'.
     1/1: $0\cmd_stop[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:302$75'.
     1/1: $0\busy[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:288$67'.
     1/2: $0\sto_condition[0:0]
     2/2: $0\sta_condition[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
     1/4: $0\dSDA[0:0]
     2/4: $0\dSCL[0:0]
     3/4: $0\sSDA[0:0]
     4/4: $0\sSCL[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:252$51'.
     1/2: $0\fSDA[2:0]
     2/2: $0\fSCL[2:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:245$44'.
     1/1: $0\filter_cnt[13:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:231$42'.
     1/2: $0\cSDA[1:0]
     2/2: $0\cSCL[1:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:204$34'.
     1/2: $0\clk_en[0:0]
     2/2: $0\cnt[15:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:194$22'.
     1/1: $0\slave_wait[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:189$21'.
Creating decoders for process `\apb_i2c.$proc$apb_i2c.sv:188$18'.
     1/1: $0\interrupt_o[0:0]
Creating decoders for process `\apb_i2c.$proc$apb_i2c.sv:169$8'.
     1/4: $0\irq_flag[0:0]
     2/4: $0\tip[0:0]
     3/4: $0\rxack[0:0]
     4/4: $0\al[0:0]
Creating decoders for process `\apb_i2c.$proc$apb_i2c.sv:0$7'.
     1/1: $1\PRDATA[31:0]
Creating decoders for process `\apb_i2c.$proc$apb_i2c.sv:70$1'.
     1/7: $0\r_cmd[7:0] [7:4]
     2/7: $0\r_cmd[7:0] [2:1]
     3/7: $0\r_cmd[7:0] [0]
     4/7: $0\r_cmd[7:0] [3]
     5/7: $0\r_tx[7:0]
     6/7: $0\r_ctrl[7:0]
     7/7: $0\r_pre[15:0]

6.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\apb_i2c.\PRDATA' from process `\apb_i2c.$proc$apb_i2c.sv:0$7'.

6.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2c_master_byte_ctrl.\cmd_ack' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$484' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ack_out' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$489' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\c_state' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$494' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_cmd' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$499' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_txd' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$504' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\shift' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$509' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ld' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
  created $adff cell `$procdff$514' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\dcnt' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:176$104'.
  created $adff cell `$procdff$519' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_byte_ctrl.\sr' using process `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:167$102'.
  created $adff cell `$procdff$524' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_ack' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
  created $adff cell `$procdff$529' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\scl_oen' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
  created $adff cell `$procdff$534' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_oen' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
  created $adff cell `$procdff$539' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_chk' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
  created $adff cell `$procdff$544' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\c_state' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
  created $adff cell `$procdff$549' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dout' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:326$93'.
  created $dff cell `$procdff$550' with positive edge clock.
Creating register for signal `\i2c_master_bit_ctrl.\al' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:318$83'.
  created $adff cell `$procdff$555' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_stop' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:312$80'.
  created $adff cell `$procdff$560' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\busy' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:302$75'.
  created $adff cell `$procdff$565' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sta_condition' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:288$67'.
  created $adff cell `$procdff$570' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sto_condition' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:288$67'.
  created $adff cell `$procdff$575' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
  created $adff cell `$procdff$580' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
  created $adff cell `$procdff$585' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
  created $adff cell `$procdff$590' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
  created $adff cell `$procdff$595' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:252$51'.
  created $adff cell `$procdff$600' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:252$51'.
  created $adff cell `$procdff$605' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\filter_cnt' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:245$44'.
  created $adff cell `$procdff$610' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSCL' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:231$42'.
  created $adff cell `$procdff$615' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSDA' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:231$42'.
  created $adff cell `$procdff$620' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\clk_en' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:204$34'.
  created $adff cell `$procdff$625' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cnt' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:204$34'.
  created $adff cell `$procdff$630' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_wait' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:194$22'.
  created $adff cell `$procdff$635' with positive edge clock and positive level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dscl_oen' using process `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:189$21'.
  created $dff cell `$procdff$636' with positive edge clock.
Creating register for signal `\apb_i2c.\interrupt_o' using process `\apb_i2c.$proc$apb_i2c.sv:188$18'.
  created $adff cell `$procdff$641' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\rxack' using process `\apb_i2c.$proc$apb_i2c.sv:169$8'.
  created $adff cell `$procdff$646' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\tip' using process `\apb_i2c.$proc$apb_i2c.sv:169$8'.
  created $adff cell `$procdff$651' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\irq_flag' using process `\apb_i2c.$proc$apb_i2c.sv:169$8'.
  created $adff cell `$procdff$656' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\al' using process `\apb_i2c.$proc$apb_i2c.sv:169$8'.
  created $adff cell `$procdff$661' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\r_pre' using process `\apb_i2c.$proc$apb_i2c.sv:70$1'.
  created $adff cell `$procdff$666' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\r_ctrl' using process `\apb_i2c.$proc$apb_i2c.sv:70$1'.
  created $adff cell `$procdff$671' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\r_tx' using process `\apb_i2c.$proc$apb_i2c.sv:70$1'.
  created $adff cell `$procdff$676' with positive edge clock and positive level reset.
Creating register for signal `\apb_i2c.\r_cmd' using process `\apb_i2c.$proc$apb_i2c.sv:70$1'.
  created $adff cell `$procdff$681' with positive edge clock and positive level reset.

6.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 15 empty switches in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
Removing empty process `i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:191$109'.
Found and cleaned up 2 empty switches in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:176$104'.
Removing empty process `i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:176$104'.
Found and cleaned up 2 empty switches in `\i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:167$102'.
Removing empty process `i2c_master_byte_ctrl.$proc$i2c_master_byte_ctrl.sv:167$102'.
Found and cleaned up 4 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:352$96'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:326$93'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:326$93'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:318$83'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:312$80'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:312$80'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:302$75'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:288$67'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:266$55'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:252$51'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:252$51'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:245$44'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:245$44'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:231$42'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:204$34'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:204$34'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:194$22'.
Removing empty process `i2c_master_bit_ctrl.$proc$i2c_master_bit_ctrl.sv:189$21'.
Removing empty process `apb_i2c.$proc$apb_i2c.sv:188$18'.
Removing empty process `apb_i2c.$proc$apb_i2c.sv:169$8'.
Found and cleaned up 1 empty switch in `\apb_i2c.$proc$apb_i2c.sv:0$7'.
Removing empty process `apb_i2c.$proc$apb_i2c.sv:0$7'.
Found and cleaned up 5 empty switches in `\apb_i2c.$proc$apb_i2c.sv:70$1'.
Removing empty process `apb_i2c.$proc$apb_i2c.sv:70$1'.
Cleaned up 36 empty switches.

6.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_byte_ctrl.
<suppressed ~26 debug messages>
Optimizing module i2c_master_bit_ctrl.
<suppressed ~51 debug messages>
Optimizing module apb_i2c.
<suppressed ~20 debug messages>

6.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_bit_ctrl.
Optimizing module apb_i2c.

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \apb_i2c..
Removed 61 unused cells and 233 unused wires.
<suppressed ~65 debug messages>

6.5. Executing CHECK pass (checking for obvious problems).
Checking module apb_i2c...
Checking module i2c_master_bit_ctrl...
Checking module i2c_master_byte_ctrl...
Found and reported 0 problems.

6.6. Executing OPT pass (performing simple optimizations).

6.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
<suppressed ~27 debug messages>
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~180 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~45 debug messages>
Removed a total of 84 cells.

6.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
    New ctrl vector for $pmux cell $procmux$281: $auto$opt_reduce.cc:137:opt_pmux$683
    New ctrl vector for $pmux cell $procmux$292: { $procmux$316_CMP $procmux$309_CMP $procmux$308_CMP $procmux$307_CMP $procmux$306_CMP $procmux$304_CMP $procmux$303_CMP $procmux$302_CMP $procmux$300_CMP $procmux$299_CMP $procmux$298_CMP $procmux$296_CMP $procmux$295_CMP $procmux$294_CMP $auto$opt_reduce.cc:137:opt_pmux$685 }
    New ctrl vector for $pmux cell $procmux$323: { $procmux$294_CMP $auto$opt_reduce.cc:137:opt_pmux$687 }
    New ctrl vector for $pmux cell $procmux$348: { $auto$opt_reduce.cc:137:opt_pmux$693 $auto$opt_reduce.cc:137:opt_pmux$691 $auto$opt_reduce.cc:137:opt_pmux$689 }
    New ctrl vector for $pmux cell $procmux$372: { $auto$opt_reduce.cc:137:opt_pmux$697 $auto$opt_reduce.cc:137:opt_pmux$695 }
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 5 changes.

6.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
<suppressed ~3 debug messages>
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~3 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~6 debug messages>
Removed a total of 4 cells.

6.6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 0 unused cells and 88 unused wires.
<suppressed ~3 debug messages>

6.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

6.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.6.13. Executing OPT_DFF pass (perform DFF optimizations).

6.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.6.16. Finished OPT passes. (There is nothing left to do.)

6.7. Executing FSM pass (extract and optimize FSM).

6.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking i2c_master_bit_ctrl.c_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Found FSM state register i2c_master_byte_ctrl.c_state.
Not marking i2c_master_byte_ctrl.core_cmd as FSM state register:
    Users of register don't seem to benefit from recoding.

6.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\c_state' from module `\i2c_master_byte_ctrl'.
  found $adff cell for state register: $procdff$494
  root of input selection tree: $0\c_state[4:0]
  found reset state: 5'00000 (from async reset)
  found ctrl input: \i2c_al
  found ctrl input: $procmux$115_CMP
  found ctrl input: $procmux$122_CMP
  found ctrl input: $procmux$147_CMP
  found ctrl input: $procmux$153_CMP
  found ctrl input: $procmux$134_CMP
  found ctrl input: $procmux$137_CMP
  found ctrl input: \core_ack
  found ctrl input: \stop
  found state code: 5'10000
  found ctrl input: $reduce_or$i2c_master_byte_ctrl.sv:184$107_Y
  found state code: 5'01000
  found state code: 5'00010
  found state code: 5'00100
  found ctrl input: \read
  found ctrl input: \go
  found ctrl input: \start
  found ctrl input: \write
  found state code: 5'00001
  found ctrl output: $procmux$115_CMP
  found ctrl output: $procmux$122_CMP
  found ctrl output: $procmux$134_CMP
  found ctrl output: $procmux$137_CMP
  found ctrl output: $procmux$147_CMP
  found ctrl output: $procmux$153_CMP
  ctrl inputs: { $reduce_or$i2c_master_byte_ctrl.sv:184$107_Y \go \core_ack \write \read \stop \start \i2c_al }
  ctrl outputs: { $procmux$153_CMP $procmux$147_CMP $procmux$137_CMP $procmux$134_CMP $procmux$122_CMP $procmux$115_CMP $0\c_state[4:0] }
  transition:    5'00000 8'-0-----0 ->    5'00000 11'00100000000
  transition:    5'00000 8'-1-00-00 ->    5'10000 11'00100010000
  transition:    5'00000 8'-1-10-00 ->    5'00100 11'00100000100
  transition:    5'00000 8'-1--1-00 ->    5'00010 11'00100000010
  transition:    5'00000 8'-1----10 ->    5'00001 11'00100000001
  transition:    5'00000 8'-------1 ->    5'00000 11'00100000000
  transition:    5'10000 8'--0----0 ->    5'10000 11'00000110000
  transition:    5'10000 8'--1----0 ->    5'00000 11'00000100000
  transition:    5'10000 8'-------1 ->    5'00000 11'00000100000
  transition:    5'01000 8'--0----0 ->    5'01000 11'00001001000
  transition:    5'01000 8'--1--0-0 ->    5'00000 11'00001000000
  transition:    5'01000 8'--1--1-0 ->    5'10000 11'00001010000
  transition:    5'01000 8'-------1 ->    5'00000 11'00001000000
  transition:    5'00100 8'--0----0 ->    5'00100 11'10000000100
  transition:    5'00100 8'0-1----0 ->    5'01000 11'10000001000
  transition:    5'00100 8'1-1----0 ->    5'00100 11'10000000100
  transition:    5'00100 8'-------1 ->    5'00000 11'10000000000
  transition:    5'00010 8'--0----0 ->    5'00010 11'01000000010
  transition:    5'00010 8'0-1----0 ->    5'01000 11'01000001000
  transition:    5'00010 8'1-1----0 ->    5'00010 11'01000000010
  transition:    5'00010 8'-------1 ->    5'00000 11'01000000000
  transition:    5'00001 8'--0----0 ->    5'00001 11'00010000001
  transition:    5'00001 8'--1-0--0 ->    5'00100 11'00010000100
  transition:    5'00001 8'--1-1--0 ->    5'00010 11'00010000010
  transition:    5'00001 8'-------1 ->    5'00000 11'00010000000

6.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\c_state$698' from module `\i2c_master_byte_ctrl'.

6.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 22 unused cells and 22 unused wires.
<suppressed ~23 debug messages>

6.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\c_state$698' from module `\i2c_master_byte_ctrl'.
  Removing unused output signal $0\c_state[4:0] [0].
  Removing unused output signal $0\c_state[4:0] [1].
  Removing unused output signal $0\c_state[4:0] [2].
  Removing unused output signal $0\c_state[4:0] [3].
  Removing unused output signal $0\c_state[4:0] [4].

6.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\c_state$698' from module `\i2c_master_byte_ctrl' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000 -> -----1
  10000 -> ----1-
  01000 -> ---1--
  00100 -> --1---
  00010 -> -1----
  00001 -> 1-----

6.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\c_state$698' from module `i2c_master_byte_ctrl':
-------------------------------------

  Information on FSM $fsm$\c_state$698 (\c_state):

  Number of input signals:    8
  Number of output signals:   6
  Number of state bits:       6

  Input signals:
    0: \i2c_al
    1: \start
    2: \stop
    3: \read
    4: \write
    5: \core_ack
    6: \go
    7: $reduce_or$i2c_master_byte_ctrl.sv:184$107_Y

  Output signals:
    0: $procmux$115_CMP
    1: $procmux$122_CMP
    2: $procmux$134_CMP
    3: $procmux$137_CMP
    4: $procmux$147_CMP
    5: $procmux$153_CMP

  State encoding:
    0:   6'-----1  <RESET STATE>
    1:   6'----1-
    2:   6'---1--
    3:   6'--1---
    4:   6'-1----
    5:   6'1-----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 8'-0-----0   ->     0 6'001000
      1:     0 8'-------1   ->     0 6'001000
      2:     0 8'-1-00-00   ->     1 6'001000
      3:     0 8'-1-10-00   ->     3 6'001000
      4:     0 8'-1--1-00   ->     4 6'001000
      5:     0 8'-1----10   ->     5 6'001000
      6:     1 8'--1----0   ->     0 6'000001
      7:     1 8'-------1   ->     0 6'000001
      8:     1 8'--0----0   ->     1 6'000001
      9:     2 8'--1--0-0   ->     0 6'000010
     10:     2 8'-------1   ->     0 6'000010
     11:     2 8'--1--1-0   ->     1 6'000010
     12:     2 8'--0----0   ->     2 6'000010
     13:     3 8'-------1   ->     0 6'100000
     14:     3 8'0-1----0   ->     2 6'100000
     15:     3 8'--0----0   ->     3 6'100000
     16:     3 8'1-1----0   ->     3 6'100000
     17:     4 8'-------1   ->     0 6'010000
     18:     4 8'0-1----0   ->     2 6'010000
     19:     4 8'--0----0   ->     4 6'010000
     20:     4 8'1-1----0   ->     4 6'010000
     21:     5 8'-------1   ->     0 6'000100
     22:     5 8'--1-0--0   ->     3 6'000100
     23:     5 8'--1-1--0   ->     4 6'000100
     24:     5 8'--0----0   ->     5 6'000100

-------------------------------------

6.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\c_state$698' from module `\i2c_master_byte_ctrl'.

6.8. Executing OPT pass (performing simple optimizations).

6.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
<suppressed ~7 debug messages>

6.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

6.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$681 ($adff) from module apb_i2c (D = \PWDATA [3], Q = \r_cmd [3]).
Adding EN signal on $procdff$676 ($adff) from module apb_i2c (D = \PWDATA [7:0], Q = \r_tx).
Adding EN signal on $procdff$671 ($adff) from module apb_i2c (D = \PWDATA [7:0], Q = \r_ctrl).
Adding EN signal on $procdff$666 ($adff) from module apb_i2c (D = \PWDATA [15:0], Q = \r_pre).
Adding EN signal on $procdff$630 ($adff) from module i2c_master_bit_ctrl (D = $0\cnt[15:0], Q = \cnt).
Adding EN signal on $procdff$605 ($adff) from module i2c_master_bit_ctrl (D = { \fSDA [1:0] \cSDA [1] }, Q = \fSDA).
Adding EN signal on $procdff$600 ($adff) from module i2c_master_bit_ctrl (D = { \fSCL [1:0] \cSCL [1] }, Q = \fSCL).
Adding EN signal on $procdff$560 ($adff) from module i2c_master_bit_ctrl (D = $eq$i2c_master_bit_ctrl.sv:316$82_Y, Q = \cmd_stop).
Adding EN signal on $procdff$550 ($dff) from module i2c_master_bit_ctrl (D = \sSDA, Q = \dout).
Adding EN signal on $procdff$549 ($adff) from module i2c_master_bit_ctrl (D = $0\c_state[17:0], Q = \c_state).
Adding EN signal on $procdff$544 ($adff) from module i2c_master_bit_ctrl (D = $0\sda_chk[0:0], Q = \sda_chk).
Adding EN signal on $procdff$539 ($adff) from module i2c_master_bit_ctrl (D = $0\sda_oen[0:0], Q = \sda_oen).
Adding EN signal on $procdff$534 ($adff) from module i2c_master_bit_ctrl (D = $0\scl_oen[0:0], Q = \scl_oen).
Adding EN signal on $procdff$524 ($adff) from module i2c_master_byte_ctrl (D = $0\sr[7:0], Q = \sr).
Adding EN signal on $procdff$519 ($adff) from module i2c_master_byte_ctrl (D = $0\dcnt[2:0], Q = \dcnt).
Adding EN signal on $procdff$499 ($adff) from module i2c_master_byte_ctrl (D = $0\core_cmd[3:0], Q = \core_cmd).
Adding EN signal on $procdff$489 ($adff) from module i2c_master_byte_ctrl (D = $0\ack_out[0:0], Q = \ack_out).

6.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 13 unused cells and 27 unused wires.
<suppressed ~16 debug messages>

6.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
<suppressed ~4 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~4 debug messages>

6.8.9. Rerunning OPT passes. (Maybe there is more to do..)

6.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~9 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~6 debug messages>
Removed a total of 5 cells.

6.8.13. Executing OPT_DFF pass (perform DFF optimizations).

6.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 0 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

6.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.8.16. Rerunning OPT passes. (Maybe there is more to do..)

6.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.8.20. Executing OPT_DFF pass (perform DFF optimizations).

6.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.8.23. Finished OPT passes. (There is nothing left to do.)

6.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell apb_i2c.$procmux$421_CMP0 ($eq).
Removed top 16 bits (of 32) from mux cell apb_i2c.$procmux$420 ($pmux).
Removed top 1 bits (of 4) from port B of cell apb_i2c.$procmux$422_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell apb_i2c.$procmux$423_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell apb_i2c.$procmux$424_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell apb_i2c.$procmux$425_CMP0 ($eq).
Removed top 15 bits (of 16) from port B of cell i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.sv:222$41 ($sub).
Removed top 31 bits (of 32) from port B of cell i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.sv:249$50 ($sub).
Removed top 18 bits (of 32) from port Y of cell i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.sv:249$50 ($sub).
Removed top 2 bits (of 4) from port B of cell i2c_master_bit_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$837 ($ne).
Removed top 2 bits (of 4) from port B of cell i2c_master_bit_ctrl.$eq$i2c_master_bit_ctrl.sv:316$82 ($eq).
Removed top 1 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$282_CMP0 ($eq).
Removed top 5 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$283_CMP0 ($eq).
Removed top 9 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$284_CMP0 ($eq).
Removed top 13 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$285_CMP0 ($eq).
Removed top 2 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$294_CMP0 ($eq).
Removed top 3 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$295_CMP0 ($eq).
Removed top 4 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$296_CMP0 ($eq).
Removed top 6 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$298_CMP0 ($eq).
Removed top 7 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$299_CMP0 ($eq).
Removed top 8 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$300_CMP0 ($eq).
Removed top 10 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$302_CMP0 ($eq).
Removed top 11 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$303_CMP0 ($eq).
Removed top 12 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$304_CMP0 ($eq).
Removed top 14 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$306_CMP0 ($eq).
Removed top 15 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$307_CMP0 ($eq).
Removed top 16 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$308_CMP0 ($eq).
Removed top 17 bits (of 18) from port B of cell i2c_master_bit_ctrl.$procmux$309_CMP0 ($eq).
Removed top 4 bits (of 18) from mux cell i2c_master_bit_ctrl.$procmux$311 ($pmux).
Removed top 1 bits (of 4) from port B of cell i2c_master_bit_ctrl.$procmux$313_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell i2c_master_bit_ctrl.$procmux$315_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_bit_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$807 ($ne).
Removed top 15 bits (of 17) from port B of cell i2c_master_bit_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$816 ($ne).
Removed top 2 bits (of 4) from port B of cell i2c_master_bit_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$823 ($ne).
Removed top 3 bits (of 5) from port B of cell i2c_master_bit_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$830 ($ne).
Removed top 4 bits (of 18) from wire i2c_master_bit_ctrl.$procmux$311_Y.
Removed top 18 bits (of 32) from wire i2c_master_bit_ctrl.$sub$i2c_master_bit_ctrl.sv:249$50_Y.
Removed top 2 bits (of 3) from port B of cell i2c_master_byte_ctrl.$sub$i2c_master_byte_ctrl.sv:182$106 ($sub).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$852 ($ne).
Removed top 2 bits (of 4) from mux cell i2c_master_byte_ctrl.$procmux$177 ($mux).
Removed top 1 bits (of 4) from mux cell i2c_master_byte_ctrl.$procmux$201 ($mux).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$fsm_map.cc:77:implement_pattern_cache$743 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$860 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$858 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$856 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$854 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_byte_ctrl.$auto$opt_dff.cc:195:make_patterns_logic$850 ($ne).
Removed top 2 bits (of 4) from wire i2c_master_byte_ctrl.$procmux$177_Y.
Removed top 1 bits (of 4) from wire i2c_master_byte_ctrl.$procmux$201_Y.

6.10. Executing PEEPOPT pass (run peephole optimizers).

6.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 0 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

6.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module apb_i2c:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module i2c_master_bit_ctrl:
  creating $macc model for $sub$i2c_master_bit_ctrl.sv:222$41 ($sub).
  creating $macc model for $sub$i2c_master_bit_ctrl.sv:249$50 ($sub).
  creating $alu model for $macc $sub$i2c_master_bit_ctrl.sv:249$50.
  creating $alu model for $macc $sub$i2c_master_bit_ctrl.sv:222$41.
  creating $alu cell for $sub$i2c_master_bit_ctrl.sv:222$41: $auto$alumacc.cc:495:replace_alu$874
  creating $alu cell for $sub$i2c_master_bit_ctrl.sv:249$50: $auto$alumacc.cc:495:replace_alu$877
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module i2c_master_byte_ctrl:
  creating $macc model for $sub$i2c_master_byte_ctrl.sv:182$106 ($sub).
  creating $alu model for $macc $sub$i2c_master_byte_ctrl.sv:182$106.
  creating $alu cell for $sub$i2c_master_byte_ctrl.sv:182$106: $auto$alumacc.cc:495:replace_alu$880
  created 1 $alu and 0 $macc cells.

6.13. Executing SHARE pass (SAT-based resource sharing).

6.14. Executing OPT pass (performing simple optimizations).

6.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.14.6. Executing OPT_DFF pass (perform DFF optimizations).

6.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.14.9. Finished OPT passes. (There is nothing left to do.)

6.15. Executing MEMORY pass.

6.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

6.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

6.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

6.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.17. Executing OPT pass (performing simple optimizations).

6.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
<suppressed ~3 debug messages>
Optimizing module i2c_master_bit_ctrl.
<suppressed ~16 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~18 debug messages>

6.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.17.3. Executing OPT_DFF pass (perform DFF optimizations).

6.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 0 unused cells and 20 unused wires.
<suppressed ~2 debug messages>

6.17.5. Finished fast OPT passes.

6.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.19. Executing OPT pass (performing simple optimizations).

6.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

6.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
    Consolidated identical input bits for $pmux cell $procmux$292:
      Old ports: A={ 4'0000 $auto$wreduce.cc:514:run$870 [13:0] }, B=252'000000000000000010000000000000000100000000000000001000000000000000010000000000000001000000000000000010000000000000000100000000000000010000000000000000100000000000000001000000000000000100000000000000001000000000000000010000000000000000000000000000000000, Y=$procmux$292_Y
      New ports: A={ 3'000 $auto$wreduce.cc:514:run$870 [13:0] }, B=238'0000000000000001000000000000000100000000000000010000000000000001000000000000001000000000000000100000000000000010000000000000010000000000000001000000000000000100000000000000100000000000000010000000000000001000000000000000000000000000000000, Y=$procmux$292_Y [16:0]
      New connections: $procmux$292_Y [17] = 1'0
    Consolidated identical input bits for $pmux cell $procmux$311:
      Old ports: A=14'00000000000000, B=56'00000000000001000000001000001000000000000000001000000000, Y=$auto$wreduce.cc:514:run$870 [13:0]
      New ports: A=4'0000, B=16'0001001010000100, Y={ $auto$wreduce.cc:514:run$870 [13] $auto$wreduce.cc:514:run$870 [9] $auto$wreduce.cc:514:run$870 [5] $auto$wreduce.cc:514:run$870 [0] }
      New connections: { $auto$wreduce.cc:514:run$870 [12:10] $auto$wreduce.cc:514:run$870 [8:6] $auto$wreduce.cc:514:run$870 [4:1] } = 10'0000000000
  Optimizing cells in module \i2c_master_bit_ctrl.
    Consolidated identical input bits for $mux cell $procmux$320:
      Old ports: A=$procmux$292_Y, B=18'000000000000000000, Y=$0\c_state[17:0]
      New ports: A=$procmux$292_Y [16:0], B=17'00000000000000000, Y=$0\c_state[17:0] [16:0]
      New connections: $0\c_state[17:0] [17] = 1'0
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
    Consolidated identical input bits for $mux cell $procmux$177:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:514:run$872 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:514:run$872 [1]
      New connections: $auto$wreduce.cc:514:run$872 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$183:
      Old ports: A=4'0100, B=4'1000, Y=$procmux$183_Y
      New ports: A=2'01, B=2'10, Y=$procmux$183_Y [3:2]
      New connections: $procmux$183_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$189:
      Old ports: A=4'1000, B=4'0100, Y=$procmux$189_Y
      New ports: A=2'10, B=2'01, Y=$procmux$189_Y [3:2]
      New connections: $procmux$189_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$195:
      Old ports: A=4'0100, B=4'1000, Y=$procmux$195_Y
      New ports: A=2'01, B=2'10, Y=$procmux$195_Y [3:2]
      New connections: $procmux$195_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$201:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:514:run$873 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:514:run$873 [2:1]
      New connections: $auto$wreduce.cc:514:run$873 [0] = 1'0
  Optimizing cells in module \i2c_master_byte_ctrl.
    Consolidated identical input bits for $mux cell $procmux$204:
      Old ports: A={ 1'0 $auto$wreduce.cc:514:run$873 [2:0] }, B=4'1000, Y=$procmux$204_Y
      New ports: A={ 1'0 $auto$wreduce.cc:514:run$873 [2:1] }, B=3'100, Y=$procmux$204_Y [3:1]
      New connections: $procmux$204_Y [0] = 1'0
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 9 changes.

6.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.19.6. Executing OPT_SHARE pass.

6.19.7. Executing OPT_DFF pass (perform DFF optimizations).

6.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
<suppressed ~1 debug messages>

6.19.10. Rerunning OPT passes. (Maybe there is more to do..)

6.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

6.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.19.14. Executing OPT_SHARE pass.

6.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$812 ($adffe) from module i2c_master_bit_ctrl.

6.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

6.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
<suppressed ~2 debug messages>
Optimizing module i2c_master_byte_ctrl.

6.19.18. Rerunning OPT passes. (Maybe there is more to do..)

6.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \apb_i2c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

6.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \apb_i2c.
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
Performed a total of 0 changes.

6.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 0 cells.

6.19.22. Executing OPT_SHARE pass.

6.19.23. Executing OPT_DFF pass (perform DFF optimizations).

6.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..

6.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.

6.19.26. Finished OPT passes. (There is nothing left to do.)

6.20. Executing TECHMAP pass (map to technology primitives).

6.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$95ab7b964273918a033d1324366ecc612d202989\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$1ed7ec530b1ba361931392f2f8504f82ccdfecaa\_90_alu for cells of type $alu.
Using template $paramod$a1665ef28c749ebcdbe9aecd466e644647b56463\_90_alu for cells of type $alu.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$9d38a59b9a726c5e01ae1f4873ae028b181ede32\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$fb2ccc7567b9f572f99303d62bd705e69acf8cd5\_90_pmux for cells of type $pmux.
No more expansions possible.
<suppressed ~1046 debug messages>

6.21. Executing OPT pass (performing simple optimizations).

6.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
<suppressed ~112 debug messages>
Optimizing module i2c_master_bit_ctrl.
<suppressed ~953 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~102 debug messages>

6.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
<suppressed ~30 debug messages>
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~720 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~75 debug messages>
Removed a total of 275 cells.

6.21.3. Executing OPT_DFF pass (perform DFF optimizations).

6.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 18 unused cells and 635 unused wires.
<suppressed ~21 debug messages>

6.21.5. Finished fast OPT passes.

6.22. Executing ABC pass (technology mapping using ABC).

6.22.1. Extracting gate netlist of module `\apb_i2c' to `<abc-temp-dir>/input.blif'..
Extracted 173 gates and 243 wires to a netlist network with 69 inputs and 31 outputs.

6.22.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       88
ABC RESULTS:               MUX cells:       12
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       33
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:        internal signals:      143
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       31
Removing temp directory.

6.22.2. Extracting gate netlist of module `\i2c_master_bit_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 534 gates and 625 wires to a netlist network with 90 inputs and 67 outputs.

6.22.2.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       27
ABC RESULTS:            ANDNOT cells:      104
ABC RESULTS:               MUX cells:       30
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:      124
ABC RESULTS:             ORNOT cells:       51
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:               XOR cells:       19
ABC RESULTS:        internal signals:      468
ABC RESULTS:           input signals:       90
ABC RESULTS:          output signals:       67
Removing temp directory.

6.22.3. Extracting gate netlist of module `\i2c_master_byte_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 184 gates and 222 wires to a netlist network with 36 inputs and 29 outputs.

6.22.3.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       46
ABC RESULTS:               MUX cells:       15
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       47
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:      157
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       29
Removing temp directory.

6.23. Executing OPT pass (performing simple optimizations).

6.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module apb_i2c.
<suppressed ~4 debug messages>
Optimizing module i2c_master_bit_ctrl.
<suppressed ~6 debug messages>
Optimizing module i2c_master_byte_ctrl.

6.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\apb_i2c'.
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~39 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
Removed a total of 13 cells.

6.23.3. Executing OPT_DFF pass (perform DFF optimizations).

6.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \apb_i2c..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Removed 2 unused cells and 790 unused wires.
<suppressed ~7 debug messages>

6.23.5. Finished fast OPT passes.

6.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `apb_i2c'. Setting top module to apb_i2c.

6.24.1. Analyzing design hierarchy..
Top module:  \apb_i2c
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

6.24.2. Analyzing design hierarchy..
Top module:  \apb_i2c
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

6.25. Printing statistics.

=== apb_i2c ===

   Number of wires:                180
   Number of wire bits:            313
   Number of public wires:          40
   Number of public wire bits:     166
   Number of ports:                 17
   Number of port bits:             90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                208
     $_ANDNOT_                      88
     $_AND_                          3
     $_DFFE_PN0P_                   33
     $_DFF_PN0_                     12
     $_MUX_                         12
     $_NAND_                         8
     $_ORNOT_                       18
     $_OR_                          33
     i2c_master_byte_ctrl            1

=== i2c_master_bit_ctrl ===

   Number of wires:                389
   Number of wire bits:            518
   Number of public wires:          34
   Number of public wire bits:     103
   Number of ports:                 16
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                473
     $_ANDNOT_                     104
     $_AND_                         27
     $_DFFE_PN0P_                   35
     $_DFFE_PN1P_                    8
     $_DFFE_PP_                      1
     $_DFF_PN0_                     24
     $_DFF_PN1_                      5
     $_DFF_P_                        1
     $_MUX_                         30
     $_NAND_                         6
     $_NOR_                         23
     $_NOT_                          6
     $_ORNOT_                       51
     $_OR_                         124
     $_XNOR_                         9
     $_XOR_                         19

=== i2c_master_byte_ctrl ===

   Number of wires:                169
   Number of wire bits:            227
   Number of public wires:          30
   Number of public wire bits:      76
   Number of ports:                 21
   Number of port bits:             50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     $_ANDNOT_                      46
     $_AND_                          1
     $_DFFE_PN0P_                   16
     $_DFF_PN0_                      9
     $_DFF_PN1_                      1
     $_MUX_                         15
     $_NAND_                         9
     $_NOR_                          8
     $_NOT_                          4
     $_ORNOT_                       19
     $_OR_                          47
     $_XNOR_                         1
     $_XOR_                          1
     i2c_master_bit_ctrl             1

=== design hierarchy ===

   apb_i2c                           1
     i2c_master_byte_ctrl            1
       i2c_master_bit_ctrl           1

   Number of wires:                738
   Number of wire bits:           1058
   Number of public wires:         104
   Number of public wire bits:     345
   Number of ports:                 54
   Number of port bits:            174
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                857
     $_ANDNOT_                     238
     $_AND_                         31
     $_DFFE_PN0P_                   84
     $_DFFE_PN1P_                    8
     $_DFFE_PP_                      1
     $_DFF_PN0_                     45
     $_DFF_PN1_                      6
     $_DFF_P_                        1
     $_MUX_                         57
     $_NAND_                        23
     $_NOR_                         31
     $_NOT_                         10
     $_ORNOT_                       88
     $_OR_                         204
     $_XNOR_                        10
     $_XOR_                         20

6.26. Executing CHECK pass (checking for obvious problems).
Checking module apb_i2c...
Checking module i2c_master_bit_ctrl...
Checking module i2c_master_byte_ctrl...
Found and reported 0 problems.

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_1 (noninv, pins=3, area=20.02) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtn_1 (noninv, pins=4, area=25.02) is a direct match for cell type $_DFF_NN0_.
  cell sky130_fd_sc_hd__dfrtp_1 (noninv, pins=4, area=25.02) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__edfxtp_1 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFFE_PP_.
  cell sky130_fd_sc_hd__dfbbn_1 (noninv, pins=6, area=32.53) is a direct match for cell type $_DFFSR_NNN_.
  cell sky130_fd_sc_hd__dfbbp_1 (noninv, pins=6, area=32.53) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \sky130_fd_sc_hd__dfrtn_1 _DFF_NN0_ (.CLK_N( C), .D( D), .Q( Q), .RESET_B( R));
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    \sky130_fd_sc_hd__edfxtp_1 _DFFE_PP_ (.CLK( C), .D( D), .DE( E), .Q( Q));
    \sky130_fd_sc_hd__dfbbn_1 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \sky130_fd_sc_hd__dfbbp_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

7.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
<suppressed ~24 debug messages>
Mapping DFF cells in module `\apb_i2c':
  mapped 45 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_1 cells.
Mapping DFF cells in module `\i2c_master_bit_ctrl':
  mapped 1 $_DFFE_PP_ cells to \sky130_fd_sc_hd__edfxtp_1 cells.
  mapped 59 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_1 cells.
  mapped 13 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
  mapped 1 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_1 cells.
Mapping DFF cells in module `\i2c_master_byte_ctrl':
  mapped 25 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_1 cells.
  mapped 1 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\apb_i2c' to `<abc-temp-dir>/input.blif'..
Extracted 195 gates and 273 wires to a netlist network with 78 inputs and 60 outputs.

8.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__diode_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_0".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_8".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_bleeder_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__lpflow_inputisolatch_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib" has 334 cells (94 skipped: 63 seq; 13 tri-state; 18 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =   16.05 MB. Time =     0.10 sec
ABC: Warning: Detected 9 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a222oi_1 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a22oi_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_0 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__and3_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__lpflow_inputiso1p_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__mux2i_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__nand3_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor4_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4b_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor4bb_1 cells:        2
ABC RESULTS:        internal signals:      135
ABC RESULTS:           input signals:       78
ABC RESULTS:          output signals:       60
Removing temp directory.

8.2. Extracting gate netlist of module `\i2c_master_bit_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 442 gates and 534 wires to a netlist network with 92 inputs and 67 outputs.

8.2.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__diode_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_0".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_8".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_bleeder_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__lpflow_inputisolatch_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib" has 334 cells (94 skipped: 63 seq; 13 tri-state; 18 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =   16.05 MB. Time =     0.10 sec
ABC: Warning: Detected 9 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_0 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211oi_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21boi_0 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a221o_1 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a221oi_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_0 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__lpflow_inputiso1p_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__lpflow_isobufsrc_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__maj3_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__mux2i_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__nand2b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nand3b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_1 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nand4b_1 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nor2_1 cells:       41
ABC RESULTS:   sky130_fd_sc_hd__nor3_1 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nor4_1 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nor4b_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_0 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__o21bai_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311ai_0 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or3_1 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or4_1 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or4b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_1 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__xor2_1 cells:        7
ABC RESULTS:        internal signals:      375
ABC RESULTS:           input signals:       92
ABC RESULTS:          output signals:       67
Removing temp directory.

8.3. Extracting gate netlist of module `\i2c_master_byte_ctrl' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 208 wires to a netlist network with 41 inputs and 26 outputs.

8.3.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__diode_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_0".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_8".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_bleeder_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__lpflow_inputisolatch_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/prawns/.volare/volare/sky130/versions/c6d73a35f524070e85faff4a6a9eef49553ebc2b/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib" has 334 cells (94 skipped: 63 seq; 13 tri-state; 18 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =   16.05 MB. Time =     0.10 sec
ABC: Warning: Detected 9 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.3.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_1 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a22o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32oi_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__lpflow_inputiso1p_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__lpflow_isobufsrc_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__mux2i_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nand2b_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3b_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_1 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__nor2b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor4_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_0 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21bai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_1 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o31a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_1 cells:        1
ABC RESULTS:        internal signals:      141
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:       26
Removing temp directory.

9. Printing statistics.

=== apb_i2c ===

   Number of wires:                389
   Number of wire bits:            522
   Number of public wires:          40
   Number of public wire bits:     166
   Number of ports:                 17
   Number of port bits:             90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                144
     i2c_master_byte_ctrl            1
     sky130_fd_sc_hd__a21o_1         1
     sky130_fd_sc_hd__a222oi_1      12
     sky130_fd_sc_hd__a22oi_1        4
     sky130_fd_sc_hd__and2_0        15
     sky130_fd_sc_hd__and3_1         2
     sky130_fd_sc_hd__clkinv_1       4
     sky130_fd_sc_hd__dfrtp_1       45
     sky130_fd_sc_hd__lpflow_inputiso1p_1      1
     sky130_fd_sc_hd__mux2_1        34
     sky130_fd_sc_hd__mux2i_1        3
     sky130_fd_sc_hd__nand2_1       11
     sky130_fd_sc_hd__nand3_1        1
     sky130_fd_sc_hd__nor2_1         2
     sky130_fd_sc_hd__nor3_1         2
     sky130_fd_sc_hd__nor4_1         1
     sky130_fd_sc_hd__nor4b_1        3
     sky130_fd_sc_hd__nor4bb_1       2

   Area for cell type \i2c_master_byte_ctrl is unknown!

   Chip area for module '\apb_i2c': 1940.611200
     of which used for sequential elements: 1126.080000 (58.03%)

=== i2c_master_bit_ctrl ===

   Number of wires:                795
   Number of wire bits:            924
   Number of public wires:          34
   Number of public wire bits:     103
   Number of ports:                 16
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                345
     sky130_fd_sc_hd__a2111oi_0      3
     sky130_fd_sc_hd__a211oi_1       2
     sky130_fd_sc_hd__a21boi_0       2
     sky130_fd_sc_hd__a21o_1         1
     sky130_fd_sc_hd__a21oi_1        5
     sky130_fd_sc_hd__a221o_1        9
     sky130_fd_sc_hd__a221oi_1       1
     sky130_fd_sc_hd__a22o_1         1
     sky130_fd_sc_hd__a22oi_1        1
     sky130_fd_sc_hd__a31oi_1        1
     sky130_fd_sc_hd__and2_0         1
     sky130_fd_sc_hd__and3_1         3
     sky130_fd_sc_hd__and4b_1        1
     sky130_fd_sc_hd__clkinv_1      12
     sky130_fd_sc_hd__dfrtp_1       59
     sky130_fd_sc_hd__dfstp_2       13
     sky130_fd_sc_hd__dfxtp_1        1
     sky130_fd_sc_hd__edfxtp_1       1
     sky130_fd_sc_hd__lpflow_inputiso1p_1      3
     sky130_fd_sc_hd__lpflow_isobufsrc_1      8
     sky130_fd_sc_hd__maj3_1         2
     sky130_fd_sc_hd__mux2_1        12
     sky130_fd_sc_hd__mux2i_1        4
     sky130_fd_sc_hd__nand2_1       34
     sky130_fd_sc_hd__nand2b_1       1
     sky130_fd_sc_hd__nand3_1        8
     sky130_fd_sc_hd__nand3b_1       1
     sky130_fd_sc_hd__nand4_1        9
     sky130_fd_sc_hd__nand4b_1      10
     sky130_fd_sc_hd__nor2_1        41
     sky130_fd_sc_hd__nor3_1        14
     sky130_fd_sc_hd__nor4_1         6
     sky130_fd_sc_hd__nor4b_1        2
     sky130_fd_sc_hd__o211a_1        1
     sky130_fd_sc_hd__o211ai_1       3
     sky130_fd_sc_hd__o21a_1         2
     sky130_fd_sc_hd__o21ai_0       23
     sky130_fd_sc_hd__o21bai_1       4
     sky130_fd_sc_hd__o22ai_1        1
     sky130_fd_sc_hd__o311a_1        1
     sky130_fd_sc_hd__o311ai_0       1
     sky130_fd_sc_hd__o31a_1         1
     sky130_fd_sc_hd__o31ai_1        5
     sky130_fd_sc_hd__or3_1          6
     sky130_fd_sc_hd__or4_1          7
     sky130_fd_sc_hd__or4b_1         1
     sky130_fd_sc_hd__xnor2_1       10
     sky130_fd_sc_hd__xor2_1         7

   Chip area for module '\i2c_master_bit_ctrl': 3539.644800
     of which used for sequential elements: 1868.041600 (52.77%)

=== i2c_master_byte_ctrl ===

   Number of wires:                332
   Number of wire bits:            390
   Number of public wires:          30
   Number of public wire bits:      76
   Number of ports:                 21
   Number of port bits:             50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     i2c_master_bit_ctrl             1
     sky130_fd_sc_hd__a21o_1         1
     sky130_fd_sc_hd__a21oi_1       14
     sky130_fd_sc_hd__a22o_1         1
     sky130_fd_sc_hd__a22oi_1        1
     sky130_fd_sc_hd__a2bb2oi_1      1
     sky130_fd_sc_hd__a32o_1         1
     sky130_fd_sc_hd__a32oi_1        2
     sky130_fd_sc_hd__and3_1         1
     sky130_fd_sc_hd__clkinv_1       8
     sky130_fd_sc_hd__dfrtp_1       25
     sky130_fd_sc_hd__dfstp_2        1
     sky130_fd_sc_hd__lpflow_inputiso1p_1      2
     sky130_fd_sc_hd__lpflow_isobufsrc_1      3
     sky130_fd_sc_hd__mux2_1         4
     sky130_fd_sc_hd__mux2i_1        1
     sky130_fd_sc_hd__nand2_1       15
     sky130_fd_sc_hd__nand2b_1       2
     sky130_fd_sc_hd__nand3_1        4
     sky130_fd_sc_hd__nand3b_1       2
     sky130_fd_sc_hd__nor2_1        19
     sky130_fd_sc_hd__nor2b_1        1
     sky130_fd_sc_hd__nor3_1         3
     sky130_fd_sc_hd__nor4_1         1
     sky130_fd_sc_hd__o211ai_1       1
     sky130_fd_sc_hd__o21ai_0        6
     sky130_fd_sc_hd__o21bai_1       1
     sky130_fd_sc_hd__o221ai_1       1
     sky130_fd_sc_hd__o22ai_1        7
     sky130_fd_sc_hd__o31a_1         1
     sky130_fd_sc_hd__o31ai_1        1
     sky130_fd_sc_hd__or3_1          1

   Area for cell type \i2c_master_bit_ctrl is unknown!

   Chip area for module '\i2c_master_byte_ctrl': 1227.427200
     of which used for sequential elements: 651.875200 (53.11%)

=== design hierarchy ===

   apb_i2c                           1
     i2c_master_byte_ctrl            1
       i2c_master_bit_ctrl           1

   Number of wires:               1516
   Number of wire bits:           1836
   Number of public wires:         104
   Number of public wire bits:     345
   Number of ports:                 54
   Number of port bits:            174
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                620
     sky130_fd_sc_hd__a2111oi_0      3
     sky130_fd_sc_hd__a211oi_1       2
     sky130_fd_sc_hd__a21boi_0       2
     sky130_fd_sc_hd__a21o_1         3
     sky130_fd_sc_hd__a21oi_1       19
     sky130_fd_sc_hd__a221o_1        9
     sky130_fd_sc_hd__a221oi_1       1
     sky130_fd_sc_hd__a222oi_1      12
     sky130_fd_sc_hd__a22o_1         2
     sky130_fd_sc_hd__a22oi_1        6
     sky130_fd_sc_hd__a2bb2oi_1      1
     sky130_fd_sc_hd__a31oi_1        1
     sky130_fd_sc_hd__a32o_1         1
     sky130_fd_sc_hd__a32oi_1        2
     sky130_fd_sc_hd__and2_0        16
     sky130_fd_sc_hd__and3_1         6
     sky130_fd_sc_hd__and4b_1        1
     sky130_fd_sc_hd__clkinv_1      24
     sky130_fd_sc_hd__dfrtp_1      129
     sky130_fd_sc_hd__dfstp_2       14
     sky130_fd_sc_hd__dfxtp_1        1
     sky130_fd_sc_hd__edfxtp_1       1
     sky130_fd_sc_hd__lpflow_inputiso1p_1      6
     sky130_fd_sc_hd__lpflow_isobufsrc_1     11
     sky130_fd_sc_hd__maj3_1         2
     sky130_fd_sc_hd__mux2_1        50
     sky130_fd_sc_hd__mux2i_1        8
     sky130_fd_sc_hd__nand2_1       60
     sky130_fd_sc_hd__nand2b_1       3
     sky130_fd_sc_hd__nand3_1       13
     sky130_fd_sc_hd__nand3b_1       3
     sky130_fd_sc_hd__nand4_1        9
     sky130_fd_sc_hd__nand4b_1      10
     sky130_fd_sc_hd__nor2_1        62
     sky130_fd_sc_hd__nor2b_1        1
     sky130_fd_sc_hd__nor3_1        19
     sky130_fd_sc_hd__nor4_1         8
     sky130_fd_sc_hd__nor4b_1        5
     sky130_fd_sc_hd__nor4bb_1       2
     sky130_fd_sc_hd__o211a_1        1
     sky130_fd_sc_hd__o211ai_1       4
     sky130_fd_sc_hd__o21a_1         2
     sky130_fd_sc_hd__o21ai_0       29
     sky130_fd_sc_hd__o21bai_1       5
     sky130_fd_sc_hd__o221ai_1       1
     sky130_fd_sc_hd__o22ai_1        8
     sky130_fd_sc_hd__o311a_1        1
     sky130_fd_sc_hd__o311ai_0       1
     sky130_fd_sc_hd__o31a_1         2
     sky130_fd_sc_hd__o31ai_1        6
     sky130_fd_sc_hd__or3_1          7
     sky130_fd_sc_hd__or4_1          7
     sky130_fd_sc_hd__or4b_1         1
     sky130_fd_sc_hd__xnor2_1       10
     sky130_fd_sc_hd__xor2_1         7

   Chip area for top module '\apb_i2c': 6707.683200
     of which used for sequential elements: 3645.996800 (54.36%)

10. Executing Verilog backend.

10.1. Executing BMUXMAP pass.

10.2. Executing DEMUXMAP pass.
Dumping module `\apb_i2c'.
Dumping module `\i2c_master_bit_ctrl'.
Dumping module `\i2c_master_byte_ctrl'.

11. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: cffd5fde4e, CPU: user 0.72s system 0.03s, MEM: 60.55 MB peak
Yosys 0.54 (git sha1 db72ec3bd, g++ 15.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)
Time spent: 54% 2x abc (0 sec), 8% 24x opt_expr (0 sec), ...
